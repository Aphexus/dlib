/*
Copyright (c) 2014 Martin Cejp
    
Boost Software License - Version 1.0 - August 17th, 2003
    
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
    
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
    
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.core.stream;

import std.stdint;
import std.conv;

alias uint64_t PosType;

interface Seekable {
    PosType getPosition() @property;
    bool setPosition(uint64_t pos);
    PosType size();
}

PosType position(Seekable s, PosType pos)
{
    if (!s.setPosition(pos))
        throw new Exception("Cannot set Seekable position to " ~ pos.to!string);
    return pos;
}

PosType position(Seekable s) {
    return s.getPosition();
}

interface Stream : Seekable {
    void close();
    bool seekable();
}

interface InputStream : Stream {
    bool readable();
    size_t readBytes(void* buffer, size_t count);
}

interface OutputStream : Stream {
    void flush();
    bool writeable();
    size_t writeBytes(const void* buffer, size_t count);
}

interface IOStream : InputStream, OutputStream {
}

interface OpenFile {
    IOStream openFile(string fileName, bool readOnly, bool create);
}

// FIXME: assumes little endian platform

bool readLE(T)(InputStream stream, T* value) {
    return stream.readBytes(cast(ubyte*) value, T.sizeof) == T.sizeof;
}

bool writeLE(T)(OutputStream stream, const T value) {
    return stream.writeBytes(cast(const(ubyte)*) &value, T.sizeof) == T.sizeof;
}

PosType copyFromTo(InputStream input, OutputStream output) {
    ubyte buffer[0x1000];
    PosType total = 0;

    for ( ; ; ) {
        size_t have = input.readBytes(buffer.ptr, buffer.length);

        if (have == 0)
            break;

        output.writeBytes(buffer.ptr, have);
        total += have;
    }

    return total;
}

bool seek(Seekable s, int64_t amount) {
    return s.setPosition(s.getPosition() + amount);
}
