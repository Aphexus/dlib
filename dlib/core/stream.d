/*
Copyright (c) 2014 Martin Cejp
    
Boost Software License - Version 1.0 - August 17th, 2003
    
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
    
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
    
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.core.stream;

import std.stdint;
import std.conv;

alias StreamPos = uint64_t;
alias StreamSize = uint64_t;
alias StreamOffset = int64_t;

class SeekException : Exception
{
    this(string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)
    {
        super(msg, file, line, next);
    }
}

/// Seekable
interface Seekable
{
    // Won't throw on invalid position, may throw on a more serious error.
    
    StreamPos getPosition() @property;
    bool setPosition(StreamPos pos);
    StreamSize size();
}

// Throw-on-error wrappers

StreamPos position(Seekable s, StreamPos pos)
{
    if (!s.setPosition(pos))
        throw new SeekException("Cannot set Seekable position to " ~ pos.to!string);
        
    return pos;
}

StreamPos position(Seekable s)
{
    return s.getPosition();
}

// TODO: Non-throwing version
StreamPos seek(Seekable s, StreamOffset amount)
{
    immutable StreamPos seekTo = s.getPosition() + amount;
    
    if (!s.setPosition(seekTo))
        throw new SeekException("Cannot set Seekable position to " ~ seekTo.to!string);

    return seekTo;
}

/// Stream
interface Stream : Seekable
{
    void close();
    bool seekable();
}

interface InputStream : Stream
{
    // Won't throw on EOF, may throw on a more serious error.
    
    bool readable();
    size_t readBytes(void* buffer, size_t count);
}

interface OutputStream : Stream
{
    // Won't throw on full disk, may throw on a more serious error.
    
    void flush();
    bool writeable();
    size_t writeBytes(const void* buffer, size_t count);
}

interface IOStream : InputStream, OutputStream
{
}

interface OpenFile
{
    IOStream openFile(string fileName, bool readOnly, bool create);
}

bool readNoSwap(T)(InputStream stream, T* value)
{
    return stream.readBytes(cast(ubyte*) value, T.sizeof) == T.sizeof;
}

bool writeNoSwap(T)(OutputStream stream, const T value)
{
    return stream.writeBytes(cast(const(ubyte)*) &value, T.sizeof) == T.sizeof;
}

// FIXME: assumes little endian platform for now
alias readLE = readNoSwap;
alias writeLE = writeNoSwap;
//alias readBE = readSwap;
//alias writeBE = writeSwap;

StreamSize copyFromTo(InputStream input, OutputStream output)
{
    ubyte buffer[0x1000];
    StreamSize total = 0;

    while (input.readable)
    {
        size_t have = input.readBytes(buffer.ptr, buffer.length);

        if (have == 0)
            break;

        output.writeBytes(buffer.ptr, have);
        total += have;
    }

    return total;
}
