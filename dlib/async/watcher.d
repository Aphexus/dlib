/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Eugene Wissner 2016-.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Eugene Wissner
 */
module dlib.async.watcher;

import dlib.async.protocol;
import dlib.async.transport;
import dlib.memory.allocator;
import dlib.memory.mmappool;
import std.experimental.allocator;
import std.functional;

version (Posix):

/**
 * A watcher is an opaque structure that you allocate and register to record
 * your interest in some event. 
 */
abstract class Watcher
{
    /// Whether the watcher is active.
    bool active;

    /**
     * Invoke some action on event.
     */
    void invoke();
}

class ConnectionWatcher : Watcher
{
    /// Watched file descriptor.
    private int socket_;

    /// Protocol factory.
    protected Protocol delegate() protocolFactory;

    /// Callback.
    package void delegate(Protocol delegate() protocolFactory,
                          int socket) accept;

    invariant
    {
        assert(socket_ >= 0, "Called with negative file descriptor.");
    }

    /**
     * Params:
     *     socket = Socket.
     */
    this(int socket)
    {
        socket_ = socket;
    }

    /// Ditto.
    protected this()
    {
    }

    /*
     * Params:
     *     P = Protocol should be used.
     */
    void setProtocol(P : Protocol)()
    {
        this.protocolFactory = () => cast(Protocol) MmapPool.instance.make!P;
    }

    /**
     * Returns: Socket.
     */
    @property inout(int) socket() inout @safe pure nothrow
    {
        return socket_;
    }

    /**
     * Returns: Application protocol factory.
     */
    @property inout(Protocol delegate()) protocol() inout
    in
    {
        assert(protocolFactory !is null, "Protocol isn't set.");
    }
    body
    {
        return protocolFactory;
    }

    override void invoke()
    {
        accept(protocol, socket);
    }
}

/**
 * Contains a pending watcher with the invoked events or a transport can be
 * read from.
 */
class IOWatcher : ConnectionWatcher
{
    /// References a watcher or a transport.
    DuplexTransport transport_;

    /**
     * Params:
     *     protocolFactory = Function returning application specific protocol.
     *     transport       = Transport.
     */
    this(Protocol delegate() protocolFactory,
         DuplexTransport transport)
    in
    {
        assert(transport !is null);
        assert(protocolFactory !is null);
    }
    body
    {
        super();
        this.protocolFactory = protocolFactory;
        this.transport_ = transport;
    }

    ~this()
    {
        MmapPool.instance.dispose(transport_);
    }

    /**
     * Assigns a transport.
     *
     * Params:
     *     protocolFactory = Function returning application specific protocol.
     *     transport       = Transport.
     *
     * Returns: $(D_KEYWORD this).
     */
    IOWatcher opCall(Protocol delegate() protocolFactory,
                     DuplexTransport transport) @safe pure nothrow
    in
    {
        assert(transport !is null);
        assert(protocolFactory !is null);
    }
    body
    {
        this.protocolFactory = protocolFactory;
        this.transport_ = transport;
        return this;
    }

    /**
     * Returns: Transport used by this watcher.
     */
    @property inout(DuplexTransport) transport() inout @safe pure nothrow
    {
        return transport_;
    }

    /**
     * Returns: Socket.
     */
    override @property inout(int) socket() inout @safe pure nothrow
    {
        return transport.socket;
    }

    /**
     * Invokes the watcher callback.
     *
     * Finalizes the transport on disconnect.
     */
    override void invoke()
    {
        if (transport.protocol is null)
        {
            transport.protocol = protocolFactory();
            transport.protocol.connected(transport);
        }
        else if (transport.disconnected)
        {
            transport.protocol.disconnected();
            MmapPool.instance.dispose(transport_);
            protocolFactory = null;
        }
        else if (transport.output.length)
        {
            transport.protocol.received(transport.output[]);
        }
        else if (transport.input.length)
        {
            try
            {
                transport.send();
            }
            catch (TransportException e)
            {
                MmapPool.instance.dispose(e);
            }
        }
    }
}
