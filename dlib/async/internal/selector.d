/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Eugene Wissner 2016-.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Eugene Wissner
 */
module dlib.async.internal.selector;

import dlib.container.buffer;
import dlib.async.loop;
import dlib.async.protocol;
import dlib.async.transport;
import dlib.memory;
import core.stdc.errno;
import core.sys.posix.netinet.in_;
import core.sys.posix.unistd;

/**
 * Transport for stream sockets.
 */
class SocketTransport : DuplexTransport
{
    private int socket_ = -1;

    private Protocol protocol_;

    /// Input buffer.
    private WriteBuffer input_;

    /// Output buffer.
    private ReadBuffer output_;

    private Loop loop;

    private bool disconnected_;

    package bool writeReady;

    /**
     * Params:
     *     loop     = Event loop.
     *     socket   = Socket.
     *     protocol = Protocol.
     */
    this(Loop loop, int socket, Protocol protocol = null)
    {
        socket_ = socket;
        protocol_ = protocol;
        this.loop = loop;
        input_ = defaultAllocator.make!WriteBuffer;
        output_ = defaultAllocator.make!ReadBuffer;
    }

    /**
     * Close the transport and deallocate the data buffers.
     */
    ~this()
    {
        close(socket);
        defaultAllocator.dispose(input_);
        defaultAllocator.dispose(output_);
        defaultAllocator.dispose(protocol_);
    }

    /**
     * Returns: Transport socket.
     */
    int socket() const @safe pure nothrow
    {
        return socket_;
    }

    /**
     * Returns: Protocol.
     */
    @property Protocol protocol() @safe pure nothrow
    {
        return protocol_;
    }

    /**
     *  Returns: $(D_KEYWORD true) if the remote peer closed the connection,
     *           $(D_KEYWORD false) otherwise.
     */
    @property immutable(bool) disconnected() const @safe pure nothrow
    {
        return disconnected_;
    }

    /**
     * Params:
     *     protocol = Application protocol.
     */
    @property void protocol(Protocol protocol) @safe pure nothrow
    {
        protocol_ = protocol;
    }

    /**
     * Returns: Application protocol.
     */
    @property inout(Protocol) protocol() inout @safe pure nothrow
    {
        return protocol_;
    }

    /**
     * Write some data to the transport.
     *
     * Params:
     *     data = Data to send.
     */
    void write(ubyte[] data)
    {
        // If the buffer wasn't empty the transport should be already there.
        if (!input.length && data.length)
        {
            loop.feed(this);
        }
        input ~= data;
    }

    /**
     * Returns: Input buffer.
     */
    @property WriteBuffer input() @safe pure nothrow
    {
        return input_;
    }

    /**
     * Returns: Output buffer.
     */
    @property ReadBuffer output() @safe pure nothrow
    {
        return output_;
    }

    /**
     * Read data from the socket. Returns $(D_KEYWORD true) if the reading
     * is completed. In the case that the peer closed the connection, returns
     * $(D_KEYWORD true) aswell.
     *
     * Returns: Whether the reading is completed.
     *
     * Throws: $(D_PSYMBOL TransportException) if a read error is occured.
     */
    bool receive()
    {
        auto readCount = recv(socket, output.buffer, output.free, 0);

        if (readCount > 0)
        {
            output_ ~= output.buffer[0..readCount];
            return false;
        }
        else if (readCount == 0)
        {
            disconnected_ = true;
            return true;
        }
        else if (errno == EAGAIN || errno == EWOULDBLOCK)
        {
            return true;
        }
        else
        {
            disconnected_ = true;
            throw make!TransportException(defaultAllocator,
                                          "Read from the socket failed.");
        }
    }

    /**
     * Returns: Whether the writing is completed.
     *
     * Throws: $(D_PSYMBOL TransportException) if a read error is occured.
     */
    bool send()
    {
        auto sentCount = core.sys.posix.netinet.in_.send(socket,
                                                         input.buffer,
                                                         input.length,
                                                         0);

        input.written = sentCount;
        if (input.length == 0)
        {
            return true;
        }
        else if (sentCount >= 0)
        {
            loop.feed(this);

            return false;
        }
        else if (errno == EAGAIN || errno == EWOULDBLOCK)
        {
            writeReady = false;
            loop.feed(this);

            return false;
        }
        else
        {
            disconnected_ = true;
            loop.feed(this);
            throw make!TransportException(defaultAllocator,
                                          "Write to the socket failed.");
        }
    }
}
