/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Eugene Wissner 2016-.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Eugene Wissner
 */
module dlib.async.transport;

import dlib.container.buffer;
import dlib.async.protocol;

/**
 * Exception thrown on read/write errors.
 */
class TransportException : Exception
{
    /**
     * Params:
     *     msg  = Message to output.
     *     file = The file where the exception occurred.
     *     line = The line number where the exception occurred.
     *     next = The previous exception in the chain of exceptions, if any.
     */
    this(string msg,
         string file = __FILE__,
         size_t line = __LINE__,
         Throwable next = null) pure @safe nothrow const
    {
        super(msg, file, line, next);
    }
}

/**
 * Base transport interface.
 */
interface Transport
{
    /**
     * Returns: Protocol.
     */
    @property Protocol protocol() @safe pure nothrow;

    /**
     * Returns: $(D_KEYWORD true) if the peer closed the connection,
     *          $(D_KEYWORD false) otherwise.
     */
    @property immutable(bool) disconnected() const @safe pure nothrow;

    /**
     * Params:
     *     protocol = Application protocol.
     */
    @property void protocol(Protocol protocol) @safe pure nothrow
    in
    {
        assert(protocol !is null, "protocolConnected cannot be unset.");
    }

    /**
     * Returns: Application protocol.
     */
    @property inout(Protocol) protocol() inout @safe pure nothrow;

    /**
     * Returns: Transport socket.
     */
    int socket() const @safe pure nothrow;
}

/**
 * Interface for read-only transports.
 */
interface ReadTransport : Transport
{
    /**
     * Returns: Underlying output buffer.
     */
    @property ReadBuffer output();

    /**
     * Reads data into the buffer.
     *
     * Returns: Whether the reading is completed.
     *
     * Throws: $(D_PSYMBOL TransportException) if a read error is occured.
     */
    bool receive()
    in
    {
        assert(!disconnected);
    }
}

/**
 * Interface for write-only transports.
 */
interface WriteTransport : Transport
{
    /**
     * Returns: Underlying input buffer.
     */
    @property WriteBuffer input();

    /**
     * Write some data to the transport.
     *
     * Params:
     *     data = Data to send.
     */
    void write(ubyte[] data);

    /**
     * Returns: Whether the writing is completed.
     *
     * Throws: $(D_PSYMBOL TransportException) if a read error is occured.
     */
    bool send()
    in
    {
        assert(input.length);
        assert(!disconnected);
    }
}

/**
 * Represents a bidirectional transport.
 */
abstract class DuplexTransport : ReadTransport, WriteTransport
{
}
