/*
Copyright (c) 2016 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Eugene Wissner 2016-.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Eugene Wissner
 */
module dlib.async.epoll;

version (linux):

public import core.sys.linux.epoll;
import dlib.async.protocol;
import dlib.async.transport;
import dlib.async.watcher;
import dlib.async.loop;
import dlib.async.event.selector;
import dlib.memory;
import dlib.network.socket;
import core.stdc.errno;
import core.sys.posix.fcntl;
import core.sys.posix.netinet.in_;
import core.sys.posix.unistd;
import core.time;
import std.algorithm.comparison;

class EpollLoop : SelectorLoop
{
    /**
     * Initializes the loop.
     */
    this()
    {
        if ((fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
        {
            throw MmapPool.instance.make!BadLoopException("epoll initialization failed");
        }
        super();
        epollEvents = makeArray!epoll_event(defaultAllocator, maxEvents);
    }

    /**
     * Free loop internals.
     */
    ~this()
    {
        defaultAllocator.dispose(epollEvents);
        close(fd);
    }

    /**
     * Should be called if the backend configuration changes.
     *
     * Params:
     *     socket    = Socket.
     *     oldEvents = The events were already set.
     *     events    = The events should be set.
     *
     * Returns: $(D_KEYWORD true) if the operation was successful.
     */
    protected override bool modify(Socket socket, EventMask oldEvents, EventMask events)
    {
        int op = EPOLL_CTL_DEL;
        epoll_event ev;

        if (events == oldEvents)
        {
            return true;
        }
        if (events && oldEvents)
        {
            op = EPOLL_CTL_MOD;
        }
        else if (events && !oldEvents)
        {
            op = EPOLL_CTL_ADD;
        }

        ev.data.fd = cast(int) socket;
        ev.events = (events & (Event.read | Event.accept) ? EPOLLIN | EPOLLPRI : 0)
                  | (events & Event.write ? EPOLLOUT : 0)
                  | EPOLLET;

        return epoll_ctl(fd, op, cast(int) socket, &ev) == 0;
    }

    /**
     * Accept incoming connections.
     *
     * Params:
     *     protocolFactory = Protocol factory.
     *     socket          = Socket.
     */
    protected override void acceptConnection(Protocol delegate() protocolFactory,
                                             Socket socket)
    {
		while (true)
        {
			Socket client;

			try
			{
				client = socket.accept();
			}
			catch (SocketException e)
			{
				defaultAllocator.dispose(e);
				break;
			}

            auto transport = make!SelectorStreamTransport(defaultAllocator, this, client);
            IOWatcher connection;

            if (connections.length > client)
            {
                connection = cast(IOWatcher) connections[cast(int) client];
                // If it is a ConnectionWatcher
                if (connection is null && connections[cast(int) client] !is null)
                {
                    defaultAllocator.dispose(connections[cast(int) client]);
                    connections[cast(int) client] = null;
                }
            }
            else
            {
                defaultAllocator.expandArray(connections, maxEvents / 2);
            }
            if (connection !is null)
            {
                connection(protocolFactory, transport);
            }
            else
            {
                connections[cast(int) client] = make!IOWatcher(defaultAllocator,
                                                     protocolFactory,
                                                     transport);
            }

            modify(client, EventMask(Event.none), EventMask(Event.read, Event.write));

            swapPendings.insertBack(connections[cast(int) client]);
        }
    }

    /**
     * Does the actual polling.
     */
    protected override void poll()
    {
        // Don't block
        immutable timeout = cast(immutable int) blockTime.total!"msecs";
        auto eventCount = epoll_wait(fd, epollEvents.ptr, maxEvents, timeout);

        if (eventCount < 0)
        {
            if (errno != EINTR)
            {
                throw make!BadLoopException(defaultAllocator);
            }
            return;
        }

        for (auto i = 0; i < eventCount; ++i)
        {
            epoll_event *ev = epollEvents[i];
            auto connection = cast(IOWatcher) connections[ev.data.fd];

            if (connection is null)
            {
                swapPendings.insertBack(connections[ev.data.fd]);
            }
            else
            {
                auto transport = cast(SelectorStreamTransport) connection.transport;
                assert(transport !is null);

                if (ev.events & (EPOLLIN | EPOLLPRI | EPOLLERR | EPOLLHUP))
                {
                    try
                    {
                        while (!transport.receive())
                        {
                        }
                        swapPendings.insertBack(connection);
                    }
                    catch (TransportException e)
                    {
                        swapPendings.insertBack(connection);
                        defaultAllocator.dispose(e);
                    }
                }
                else if (ev.events & (EPOLLOUT | EPOLLERR | EPOLLHUP))
                {
                    transport.writeReady = true;
                }
            }
        }
    }

    /**
     * Returns: The blocking time.
     */
    override protected @property inout(Duration) blockTime()
    inout @safe pure nothrow
    {
        return min(super.blockTime, 1.dur!"seconds");
    }

    private int fd;
    private epoll_event[] epollEvents;
}
