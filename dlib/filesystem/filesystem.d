/*
Copyright (c) 2014 Martin Cejp
Copyright (c) 2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.filesystem.filesystem;

import dlib.core.stream;

import std.datetime;

alias FileSize = StreamSize;

/// FileStat
struct FileStat {
    bool isFile, isDirectory;
    FileSize sizeInBytes;       // valid if isFile
    SysTime creationTimestamp, modificationTimestamp;
}

/// FileIterator
interface FileIterator {
    bool next(out string path, FileStat* stat_out = null);
    
    final int opApply(int delegate(ref string path) dg)  {
        int result = 0;
        
        for (;;) {
            string path;
            
            if (!next(path, null))
                break;
            
            result = dg(path);
            
            if (result)
                break;
        }
        
        return result;
    }
    
    final int opApply(int delegate(ref string path, ref FileStat entry) dg) {
        int result = 0;
        
        for (;;) {
            string path;
            FileStat entry;
            
            if (!next(path, &entry))
                break;
            
            result = dg(path, entry);
            
            if (result)
                break;
        }
        
        return result;
    }
}

/// Directory
interface Directory {
    void close();
    FileIterator contents();
    
    final int opApply(int delegate(ref string path) dg)  {
        return contents.opApply(dg);
    }
    
    final int opApply(int delegate(ref string path, ref FileStat entry) dg) {
        return contents.opApply(dg);
    }
}

/// ReadOnlyFileSystem
interface ReadOnlyFileSystem {
    bool stat(string fileName, out FileStat stat);
    ///
    unittest {
        import dlib.filesystem.localfilesystem;
        import std.conv;
        import std.stdio;
        
        void printStat(string fileName) {
            FileStat stat;
            assert(localFS.stat(fileName, stat));
            
            writef("'%s'\t", fileName);
            
            if (stat.isFile)
                writefln("%u", stat.sizeInBytes);
            else if (stat.isDirectory)
                writefln("DIR");
            
            writefln("  created: %s", to!string(stat.creationTimestamp));
            writefln("  modified: %s", to!string(stat.modificationTimestamp));
        }
        
        // FileSystem.stat
        printStat("package.json");
        printStat("dlib");
        writeln();
    }
    
    InputStream openForInput(string fileName);
    
    Directory openDir(string path);
    
    FileIterator findFiles(string baseDir, bool recursive, bool delegate(string path) filter);
    int findFiles(string baseDir, bool recursive, bool delegate(string path) filter, int delegate(string path) dg);
    ///
    unittest {
        import dlib.filesystem.localfilesystem;
        import std.regex;
        import std.stdio;
        
        writeln("Listing dlib/core/*.d:");
    
        foreach (string path, FileStat stat; localFS.findFiles("", true, delegate bool(string path) {
                return !matchFirst(path, `^dlib/core/.*\.d$`).empty;
            })) {
            writefln("%s: %u bytes", path, stat.sizeInBytes);
        }
        
        writeln();
    }
}

// TODO: Use exceptions or not?
/// FileSystem
interface FileSystem: ReadOnlyFileSystem {
    /*enum AccessFlags {
        read,
        write
    }*/
    
    /// creation flags
    enum {
        create = 1,
        truncate = 2,
    }
    
    // TODO: Keep it this way? (strongly-typed)
    OutputStream openForOutput(string fileName, uint creationFlags);
    IOStream openForIO(string fileName, uint creationFlags);
    
    //IOStream openFile(string fileName, uint accessFlags, uint creationFlags);
    
    bool makeDir(string path, bool recursive);
    
    bool move(string path, string newPath);
    bool remove(string path, bool recursive);
}
